{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","input","setInput","cards","setCards","gif","setGif","url","useEffect","fetch","then","response","json","data","planets","results","forEach","planet","name","population","climate","terrain","className","htmlFor","type","placeholder","onChange","e","target","value","map","card","index","src","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0OAoFeA,MAhFf,WAAgB,IAAD,EAEaC,mBAAS,IAFtB,mBAENC,EAFM,KAECC,EAFD,OAGaF,mBAAS,IAHtB,mBAGNG,EAHM,KAGCC,EAHD,OAISJ,oBAAS,GAJlB,mBAINK,EAJM,KAIDC,EAJC,KAOTC,EAAG,gDAA4CN,GA6BnD,OA3BAO,qBAAU,WACK,KAAVP,GACDK,GAAO,GACPG,MAAMF,GACHG,MAAK,SAAAC,GACJ,OAAOA,EAASC,UAEjBF,MAAK,SAAAG,GACJP,GAAO,GACP,IAAIQ,EAAUD,EAAKE,QAEnBX,EADY,IAGZU,EAAQE,SAAQ,SAAAC,GACdb,GAAS,SAAAD,GAAK,4BAAQA,GAAR,CAAe,CAAEe,KAAMD,EAAOC,KAAMC,WAAYF,EAAOE,WAAYC,QAASH,EAAOG,QAASC,QAASJ,EAAOI,sBAMhIf,GAAO,GAEPF,EADY,OAIb,CAACH,IAGF,sBAAKqB,UAAU,MAAf,UACE,mCACE,2CACA,kDAEF,uBAAMA,UAAU,YAAhB,UACE,0BAASA,UAAU,aAAnB,UACE,uBAAOA,UAAU,UAAUC,QAAQ,SAAnC,oBACA,uBAAOC,KAAK,OAAON,KAAK,SAASO,YAAY,sBAAsBC,SAAU,SAACC,GAAD,OAAOzB,EAASyB,EAAEC,OAAOC,aAExG,yBAASP,UAAU,oBAAnB,SACGnB,EAAM2B,KAAI,SAACC,EAAMC,GAChB,OAAG3B,EACE2B,EAAQ,EACD,6BAGR,mCACE,qBAAKV,UAAU,MAAMW,IAAI,qDAIlB,KAAVhC,EAEC,6BAGA,sBAAKqB,UAAU,OAAf,UACE,6BAAKS,EAAKb,OACV,sBAAKI,UAAU,WAAf,yBAAsC,+BAAOS,EAAKZ,gBAClD,sBAAKG,UAAU,WAAf,sBAAmC,+BAAOS,EAAKX,aAC/C,sBAAKE,UAAU,WAAf,sBAAmC,+BAAOS,EAAKV,4BC5DlDa,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB1B,MAAK,YAAkD,IAA/C2B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCFdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.c8e15b03.chunk.js","sourcesContent":["import './App.css';\r\nimport Gif from './components/gif';\r\nimport { useState, useEffect } from 'react';\r\n\r\nfunction App() {\r\n  \r\n  const [input, setInput] = useState(\"\");\r\n  const [cards, setCards] = useState([]);\r\n  const [gif, setGif] = useState(false)\r\n\r\n  let realCards = cards;\r\n  let url = `https://swapi.dev/api/planets/?search=${input}`;\r\n\r\n  useEffect(()=>{\r\n    if(input !== ''){\r\n      setGif(true)\r\n      fetch(url)\r\n        .then(response => {      \r\n          return response.json();\r\n        })\r\n        .then(data => {\r\n          setGif(false)\r\n          let planets = data.results;\r\n          realCards = [];\r\n          setCards(realCards);\r\n\r\n          planets.forEach(planet => {\r\n            setCards(cards => [...cards, { name: planet.name, population: planet.population, climate: planet.climate, terrain: planet.terrain }])\r\n            \r\n          });\r\n          \r\n        })\r\n    } else {\r\n      setGif(false)\r\n      realCards = [];\r\n      setCards(realCards);   \r\n    }\r\n\r\n  }, [input])\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header>\r\n        <h1>Star Wars</h1>\r\n        <p>Planet Seacher</p>\r\n      </header>\r\n      <main className=\"container\">\r\n        <section className=\"search-bar\">\r\n          <label className=\"sr-only\" htmlFor=\"planet\">Search</label>\r\n          <input type=\"text\" name=\"planet\" placeholder=\"Search for a planet\" onChange={(e) => setInput(e.target.value)}></input>\r\n        </section>\r\n        <section className=\"planets-container\">\r\n          {cards.map((card, index) => {\r\n            if(gif) {\r\n              if(index > 0) {\r\n                return (<></>)\r\n              }\r\n              return (\r\n                <>\r\n                  <img className=\"gif\" src=\"https://giffiles.alphacoders.com/145/14596.gif\"/>\r\n                </>\r\n              )\r\n            }\r\n            if(input === '') {\r\n              return(\r\n                <></> \r\n              )} else {\r\n              return (\r\n                <div className=\"card\">\r\n                  <h2>{card.name}</h2>\r\n                  <div className=\"category\">Population: <span>{card.population}</span></div>\r\n                  <div className=\"category\">Climate: <span>{card.climate}</span></div>\r\n                  <div className=\"category\">Terrain: <span>{card.terrain}</span></div>\r\n                </div>\r\n              )\r\n              }\r\n            \r\n          })}\r\n        </section>\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}